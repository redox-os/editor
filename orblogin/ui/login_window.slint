import { Button, LineEdit, VerticalBox } from "std-widgets.slint";
import { LoginButton } from "./login_button.slint";
import { LoginInput } from "./login_input.slint";

global LoginWindowTheme {
    out property<length> v-spacing: 10px;
    out property<length> welcome-text-size: 28px;
    out property<brush> error-message-color: #ED2839;
    out property<length> error-message-font-size: 18px;
    out property<int> error-message-font-weight: 800;
    out property<brush> input-disabled-border-color: Colors.gray;
    out property<brush> input-default-border-color: #1D1D1D;
}

export component LoginWindow inherits Window {
    in property<length> window-width <=> self.min_width;
    in property<length> window-height <=> self.min_height;
    forward-focus: username;
    no-frame: true;
    title: "orblogin";

    // called when the user clicks the login button or presses Enter
    callback authenticate(string, string) -> bool;

    // Called when the user authenticates successfully.
    // Hides LoginWindow. then launches the provided command as a new process.
    callback exec-login-cmd();

    // Indicates that the username/password combo is wrong.
    // Display error message and change inputs border color to red.
    in-out property <bool> login-failed: false;

    // Indicates that the login form should be reset to its initial state.
    property <bool> reset-form: false;

    in-out property<string> username-input <=> username.text;

    background-img := Image {
        width: window-width;
        height: window-height;
        source: @image-url("login.png");
        image-fit: fill;
    }

    // FocusScope has to be a parent due to slint's incomplete focus handling implementation,
    // see https://github.com/slint-ui/slint/issues/798
    // Probably will change in future versions.
    FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Escape) {
                username.text = "";
                password.text = "";
                reset-form = true;
                login-failed = false;
                username.focus();
                return accept;
            }

            if (event.text == Key.Tab) {
                if (username.has-focus) {
                    password.focus();
                    return accept;
                }
                if (password.has-focus) {
                    username.focus();
                    return accept;
                }
            }
            reject
        }
            
        VerticalBox {
            alignment: center;
            x: (root.width - self.width) / 2;
            spacing: LoginWindowTheme.v-spacing;
            width: root.width * 0.25;
            
            Text {
                color: white;
                text: "Welcome to Redox OS";
                font-size: LoginWindowTheme.welcome-text-size;
                horizontal-alignment: center;
            }
            username :=  LoginInput {
                text: "";
                enabled: true;
                placeholder-text: "Username";
                input-type: InputType.text;
                
                accepted => {
                    password.focus();
                }
            }
            password := LoginInput {
                enabled: true;
                text: "";
                input-type: InputType.password;
                placeholder-text: "Password";
                accepted => {
                    do-authenticate();
                }
            }
            LoginButton {
                text: "Login";
                clicked => {
                    do-authenticate();
                }
            }
            error-message := Text {
                color: 	LoginWindowTheme.error-message-color;
                font-size: LoginWindowTheme.error-message-font-size;
                font-weight: LoginWindowTheme.error-message-font-weight;
                horizontal-alignment: center;
                text: "Invalid username / password combination !";
                visible: false;
            }
        }
    }

    states [
        login-failed when login-failed && !reset-form: {
            username.enabled: true;
            username.has-error: true;
            password.enabled: true;
            password.has-error: true;
            error-message.visible: true;
        }
        reset when !login-failed && reset-form: {
            username.enabled: true;
            username.has-error: false;
            password.enabled: true;
            password.has-error: false;
            error-message.visible: false;
        }
    ]

    function do-authenticate() {
        if (authenticate(username.text, password.text)) {
            login-failed = false;
            exec-login-cmd();
        } else {
            login-failed = true;
        }
        reset-form = false;
    }
}


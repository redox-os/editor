import { Button, LineEdit, VerticalBox } from "std-widgets.slint";
import { LoginButton } from "./login_button.slint";
import { LoginInput } from "./login_input.slint";

export component LoginWindow inherits Window {
    width: 1280px;
    height: 920px;
    forward-focus: username;
    no-frame: true;

    // called when the user clicks the login button or presses Enter
    callback authenticate(string, string) -> bool;

    // Called when the user authenticates successfully.
    // Hides LoginWindow. then launches the provided command as a new process.
    callback exec_login_cmd();

    // Indicates that the username/password combo is wrong.
    // Display error message and change inputs border color to red.
    in-out property <bool> login_failed: false;

    background_img := Image {
        width: root.width;
        height: root.height;
        source: @image-url("login.png");
    }
     
    horizontal_layout := HorizontalLayout {
        alignment: center;
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        width: root.width / 2;
        height: root.height / 2;
        
        VerticalBox {
            alignment: center;
            spacing: 10px;
            
            Text {
                color: white;
                text: "Welcome to Redox OS";
                font-size: 28px;
                horizontal-alignment: center;
            }
            username :=  LoginInput {
                placeholder-text: "Username";
                input-type: InputType.text;
                
                accepted => {
                    password.focus();
                }
            }
            password := LoginInput {
                input-type: InputType.password;
                placeholder-text: "Password";
                accepted => {
                    do-authenticate();
                }
            }
            LoginButton {
                text: "Login";
                clicked => {
                   do-authenticate();
                }
            }
            error_message := Text {
                color: 	#ED2839;
                font-size: 18px;
                font-weight: 800;
                horizontal-alignment: center;
                text: "Invalid username / password combination !";
                visible: false;
            }
        }
    }

    function do_authenticate() {
        username.enabled = false;
        password.enabled = false;
       
        if (authenticate(username.text, password.text)) {
            error-message.visible = false;
            login-failed = false;
            username.border-color = Colors.gray;
            password.border-color = Colors.gray;
            error-message.visible = false;
            username.text = "";
            password.text = "";
        } else {
            login_failed = true;
            username.border-color = Colors.red;
            password.border-color = Colors.red;
            error-message.visible = true;
        }
       
        username.enabled = true;
        password.enabled = true;
       }
}



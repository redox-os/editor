// Single line text input field with Material Design Outline TextField look and feel.
// Reimplementation from the std-widgets of LineEdit
// to able to costumize its text and border color, see issue: https://github.com/slint-ui/slint/issues/1232
import { LoginTheme } from "./theme.slint";

export component LoginInput {
    in property border-color <=> container.border-color;
    in property <length> font-size <=> input.font-size;
    in-out property <string> text <=> input.text;
    in property <string> placeholder-text <=> placeholder.text;
    out property <bool> has-focus: input.has-focus;
    in property <bool> enabled: input.enabled;
    in property input-type <=> input.input-type;
    in property horizontal-alignment <=> input.horizontal-alignment;
    in property read-only <=> input.read-only;
    // Indicates that the input has invalid credentials entered, reflect that visually
    in property <bool> has-error;
    callback accepted(string);
    callback edited(string);

    min-width: LoginTheme.min-width-regular;
    height: LoginTheme.height-regular;
    forward-focus: input;
    
    container := Rectangle {
        background: LoginTheme.input-background;
        width: 100%;
        height: 100%;
        border-radius: LoginTheme.border-radius;
        border-width: LoginTheme.border-width;
        border-color: LoginTheme.border-brush;
    }

    layout := HorizontalLayout {
        padding-left: LoginTheme.padding-regular;
        padding-right: LoginTheme.padding-regular;

        Rectangle {
            clip: true;

            placeholder := Text {
                width: 100%;
                height: 100%;
                color:  LoginTheme.input-placeholder-brush;
                font-size: LoginTheme.font-size-regular-relative;
                font-weight: LoginTheme.font-weight-thin;
                visible: false;
                vertical-alignment: center;

                states [
                    empty when input.text == "" : {
                        visible: true;
                    }
                ]
            }

            input := TextInput {
                property <length> computed_x;
                property <length> padding-outer: layout.padding-left + layout.padding-right;

                x: min(0px, max(parent.width - self.width, self.computed_x));
                width: max(parent.width, self.preferred-width);
                height: 100%;
                color: LoginTheme.input-foreground;
                vertical-alignment: center;
                font-size: LoginTheme.font-size-regular-relative;
                font-weight: LoginTheme.font-weight-bold;
                padding: LoginTheme.padding-small;

                accepted => { root.accepted(self.text); }
                edited => { root.edited(self.text); }
                cursor-position-changed(cpos) => {
                    if (cpos.x + self.computed_x < self.padding-outer) {
                        self.computed_x = - cpos.x + self.padding-outer;
                    } else if (cpos.x + self.computed_x > parent.width - self.padding-outer) {
                        self.computed_x = parent.width - cpos.x - self.padding-outer;
                    }
                }
            }
        }
    }

    states [
        disabled when !root.enabled : {
            container.border-color: LoginTheme.disabled-border-brush;
            container.opacity: LoginTheme.disabled-opacity;
            input.opacity: LoginTheme.disabled-opacity;
            placeholder.opacity: LoginTheme.disabled-opacity;
        }
        focused when root.has-focus && !root.has-error: {
            container.border-width: LoginTheme.border-width;
            container.border-color: LoginTheme.input-foreground;
            input.color:LoginTheme.input-foreground;
        }
        has-error when root.has-error: {
            container.border-color: LoginTheme.error-brush;
        }
    ]
}
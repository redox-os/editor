// Single line text input field with Material Design Outline TextField look and feel.
// Reimplementation from the std-widgets of LineEdit
// to able to costumize its text and border color, see issue: https://github.com/slint-ui/slint/issues/1232
export component LoginInput {
    in property border-color <=> container.border-color;
    in property <length> font-size <=> input.font-size;
    in-out property <string> text <=> input.text;
    in property <string> placeholder-text <=> placeholder.text;
    out property <bool> has-focus: input.has-focus;
    in property <bool> enabled <=> input.enabled;
    in property input-type <=> input.input-type;
    in property horizontal-alignment <=> input.horizontal-alignment;
    in property read-only <=> input.read-only;
    callback accepted(string);
    callback edited(string);

    min-width: 100px;
    height: 36px;
    forward-focus: input;
    
    container := Rectangle {
        background: #282828;
        width: 100%;
        height: 100%;
        border-radius: 0px;
        border-width: 2px;
        border-color: #1D1D1D;
    }

    layout := HorizontalLayout {
        padding-left: 4px;
        padding-right: 4px;

        Rectangle {
            clip: true;

            placeholder := Text {
                width: 100%;
                height: 100%;
                color:  lightgray;
                font-size: 16 * 0.0625rem;
                font-weight: 200;
                visible: false;
                vertical-alignment: center;

                states [
                    empty when input.text == "" : {
                        visible: true;
                    }
                ]
            }

            input := TextInput {
                property <length> computed_x;
                property <length> padding-outer: layout.padding-left + layout.padding-right;

                x: min(0px, max(parent.width - self.width, self.computed_x));
                width: max(parent.width, self.preferred-width);
                height: 100%;
                color: white;
                vertical-alignment: center;
                font-size: 16 * 0.0625rem;
                font-weight: 600;
                padding: 2px;

                accepted => { root.accepted(self.text); }
                edited => { root.edited(self.text); }
                cursor-position-changed(cpos) => {
                    if (cpos.x + self.computed_x < self.padding-outer) {
                        self.computed_x = - cpos.x + self.padding-outer;
                    } else if (cpos.x + self.computed_x > parent.width - self.padding-outer) {
                        self.computed_x = parent.width - cpos.x - self.padding-outer;
                    }
                }
            }
        }
    }

    states [
        disabled when !root.enabled : {
            container.border-color: gray;
            container.opacity: 0.38;
            input.opacity: 0.38;
            placeholder.opacity: 0.38;
        }
        focused when root.has-focus : {
            container.border-width: 2px;
            container.border-color: white;
            input.color:white;
        }
    ]
}